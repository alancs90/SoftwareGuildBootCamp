														HEY HEY 2nd DRAFT%%

=============================================================================
Michael Rodriguez 
 
 
Class Diagram 
* Use Crud to start building from 
* Take note to toggle betwemen training & Prod mode will be done via the configuration file 
* The configuration file will write to Orders_DDMMYYY.txt
 
The UI should start with a menu to prompt the user for what they would like to do: 
 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    *  <<Flooring Program>>
    * 1. Display Orders
    * 2. Add an Order
    * 3. Edit an Order
    * 4. Remove an Order
    * 5. Save Current Work
    * 6. Quit
    *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Example : 	
 
> package name
    +class name : interface/inheritance 
        + public name : return type
        - private name : return type
 
***************************************************************************************************
â€‹* Ask Does Full Crud Apply to all of the DTO's?

> com.mr.flooringOrders.app
	+main(): static void
	ctx files 


> com.mr.flooringOrders.controller
    	+ FlooringOrdersController
        	- service : FlooringOrderService
        	- view : FlooringOrdersView

		

+ flooringController(FlooringOrderService service,FlooringOrdersView view)
        	+ run() : void
        	- addOrder() : void
        	- editOrder() : void
        	- removeOrder() : void
        	- getAllOrders() : void 

		+ getLocalDate(): LocalDate localDate
		+ displayAllOrders() : List <Order>
		+ selectOrderById() :  Integer OrderId
		+ createOrderId : String
		+ addState() : String 
		+ addArea() : double
		+ addProductType : String
		+ validateState() : String
		+ validateProduct : String
		+ createOrderInDao : Order
		+ addCustomerName : String 
		+ getTaxRate() : BigDecimal 
		
		
		
		
	

>com.mr.flooringOrders.daos
 
	+ OrderDao
		+ create(Order order) : Order 
		+ readAll(LocalDate localDate) : List <Order> 
		+ readById(LocalDate localDate, Order order) : Order
		+ update(LocalDate localDate, Order order) : Order 
		+ delete(LocalDate localDate,Order order) : Order

	 + OrderDaoFileProdImpl : OrderDao
	 	- orders : Map <LocalDate localDate , HashMap<Integer
	orderId ,Order order>>()  
	 	+ FILENAME : String
		+ DELIMITER : String
	 	+ OrderDaoFileImpl(String fileName)
	 	- loadLibrary() : String throws PersistenceException
		- writeLibrary() : void throws PersistenceException
		+ save() : void
		- marshall(Order orderAsObject) : String
		- unmarshall(String OrderAsString) : Order
	  + OrderDaoFileTrainingImpl : OrderDao
	 	- orders : Map <LocalDate localDate, HashMap<Integer orderId, Order order>>()  
	 	- FILENAME : String
	 	+ OrderDaoFileImpl(String fileName)
	 	- loadLibrary() : void throws PersistenceException
		+ save() : void
		- unmarshall() : order 
	 + StateTaxDao 
	 	+ readAll() : List <StateTax> 
	 	+ readStateTax(String stateId) : StateTax
 
	+ StateTaxDaoFileImpl
		- State : List <StateTax> 
		+ FILENAME : String
		+ DELIMITER : String
		+ StateTaxDaoFileImpl(String filename) 
		- loadLibrary() : void throw PersistenceException 
		- unmarshall(String STATEFILENAME) : StateTax
 
	+ ProductDao 
	    + readAll() : List <ProductDao> 
	    + readByProduct(String productName) : Product
	    - loadProductLibrary() : String throw Persistence Exception
 	+ ProductDaoFileImpl: ProductDao
	 	- product : Map <Product> 
		- FILENAME : String
		- load() : void throws PersistenceException
		- ProductDaoFileImpl(String fileName) 
		- marshallProduct(Product productAsObject) : String
		- unmarshallProduct(String productAsString) : Product 
		- writeLibrary() : void throws PersistenceException
		- loadLibrary() : void throws PersistenceException

 > com.mr.flooringOrders.dtos
 
	 + StateTax
 		- state : String (g/s)
 		- taxRate : BigDecimal (g/s)
 
	 + Product
 		- productType : String (g/s)
 		- costPerSquareFoot : BigDecimal (g/s)
 		- laborCostPerSquareFoot : Double  (g/s)
 
	 + Order 
		- orderId : int (g/s)
		- customerName : String (g/s)
		- state : String (g/s)
		- stateTaxes : BigDecimal  (g/s)
		- productType : String (g/s)
		- area : Double (g/s)
		- costPerSqFoot : BigDecimal  (g/s)
		- laborCostPerSqFoot : BigDecimal (g/s)
		- materialCost : BigDecimal  (g/s)
		- laborCost : BigDecimal  (g/s)
		- tax : BigDecimal (g/s)
		- total : BigDecimal   (g/s)


>com.mr.flooringOrders.Service
 
	FlooringOrderService 
		+ Exception e : Exception 
    		+ DuplicateOrderException : Exception 
    		+ InvalidOrderException : Exception 
    		+ OrderNotFoundException : Exception 
    		+ PersistenceException : Exception 
    		+ InvalidStateException : Exception 
    		+ InvalidMaterialException : Exception 
    		+ AreaMininumException : Exception 
    		+ InvalidStateException : Exception
    		+ InvalidProductException : Exception
	
		+ addOrder(LocalDate date, Order order): Order  throws 				InvalidOrderException, InvalidProductException, 				InvalidStateException, PersistenceException, 					DuplicateOrderException, InvalidMaterialException      
       
	
		+ displayAllOrdersToDate(LocalDate localDate) : List <Order> throws 			Exception 
		+ editOrder(LocalDate localDate, Order order) : Order  throws 				InvalidOrderException
		+ removeOrder(LocalDate localDate, Order order) : Order throws 				InvalidOrderException, OrderNotFoundException
		+ saveOrder(LocalDate localDate, Order order) : Order  throws 
          		PersistenceException
		+ getOrder(LocalDate localDate, int orderId) : Order throws 
		+ createOrderInDao(localDate, orderId) : Order
		+ validateOrder(Order order) : Order throws InvalidOrderException, 			DuplicateOrderException, DuplicateOrderException

		+ validateState(String stateName ) : String throws 				InvalidStateException
		+ validateProduct(String productName) : String 				invalidProductException



 	+ FlooringOrderServiceImpl : FlooringOrderService
		-  FlooringOrderDao : FlooringOrderDao 
		-  StateTaxDao : StateTaxDao
		-  ProductDao : ProductDao
		+ FlooringOrderServiceImpl(OrderDao orderDao, ProductDao 			productDao, StateTaxDao stateTaxDao)
		- calculateSubTotal(Order, Product, StateTax) : Order  	
		
 
> com.mr.flooringOrders.ui
 	 +FlooringOrders.view 
		+ getMenuSelection() : int 
		+ getOrderById() : int 
		+ getNewOrderInfo(List <Product> products, List <StateTax> 			taxes ) : Order
		+ getCustomerName() : String 
		+ getState() : String
		+ getArea() : double
		+ getProductType() : String
		+ getStateTaxRate(Order order) : BigDecimal 
		+ displayAllOrders(List<Order> ordersList) : void
		+ displaySelectedOrder(Order order) : void 
		+ getLocalDate() : LocalDate
		+ displayEditOptions() : int 
	+UserIo
		+ print(String msg) : void 
		+ readDouble(String prompt); : double
		+ readDouble(String prompt, double min, double max) : double
		+ readFloat(String prompt) : float
		+ readFloat(String prompt, float min, float max) : float
		+ readInt(String prompt) : int
		+ readInt(String prompt, int min, int max) : int
		+ readLong(String prompt) : long
		+ readLong(String prompt, long min, long max) : long
		+ readBigDecimal(String prompt) : BigDecimal
		+ readString(String prompt) : String
	+UserIoConsoleImpl : UserIo
		+ Scanner sc 
	
	
 



		
 
       


       