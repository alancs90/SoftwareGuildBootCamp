Mastery GuideLines


The application will have a config file set to the mode of either training or Prod

If mode is Training -> Application should load all existing order data, but it shouldnt persist any new / modified order data

If mode is Prod the application should read and write order information from file called Orders_MMDDYYYY.txt

Order Consist of
	Order #
	Customer Name 
	State 
	Data/ Taxes 
	Product Type
	Area 
	Cost per Sq Foot
	Labor Cost Per Sq Foot
	Material Cost
	Labor Cost
	tax 
	total 

Taxes and Product type info can be found in the Data/Taxes.txt & Data/Products.txt files. 
THe customer state and product type entered by a user must match items from these files. 
* This info is read in from the file in both Prod and training modes

1. Use N-tier development and MVC principles in structuring code to handle products, taxes, and orders appropriately. Your application should follow the MVC pattern presented in the course.

2.Use unit tests and integration tests to ensure that your application's data layers and business logic (service layer) code are covered.

3. If time allows, implement an audit trail using aspect-oriented programming.

We are using an enterprise MVC architecture for this project, so your code must be organized into reasonable classes. You will draw a UML class diagram and high-level flowchart before proceeding with writing code.

For an enterprise architecture, our code must have layers:
	The model package may only contain classes that have data members (properties).
	The dao package contains classes that are responsible for persisting data.
	The controller package contains classes that orchestrate the program.
	The view package contains classes that interact with the user.
	The service package contains the service layer components.
	The UserIO class (along with the view component) will handle all IO for the user.

Build this application following the process outlined in the Agile Approach Checklist for Console Applications

The UI should start with a menu to prompt the user for what they would like to do: 

 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    *  <<Flooring Program>>
    * 1. Display Orders
    * 2. Add an Order
    * 3. Edit an Order
    * 4. Remove an Order
    * 5. Save Current Work
    * 6. Quit
    *
    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *




Display Orders
	Display orders will ask the user for a date and then display the orders for that date. If no orders exist for that date, it will display an error message and return the user to the main menu.

Add an Order
	Add an order will ask the user for each piece of order data. At the end, it will display a summary of the data entered and ask the user to commit (Y/N). If yes, the data will be written to the orders list. If no, the data will be discarded and the user returned to the main menu.

The system should generate an order number for the user based on the next number in the file (so if there are two orders, the next order should be number 3)

Edit an Order
	Edit will ask the user for a date and order number. If the order exists for that date, it will ask the user for each piece of order data but display the existing data. If the user enters something new, it will replace that data; if the user hits Enter without entering data, it will leave the existing data in place. For example:

Enter customer name (Wise):

If the user enters a new name, the name will replace Wise; otherwise it will leave it as-is.

Remove an Order
	For removing an order, the system should ask for the date and order number. If it exists, the system should display the order information and prompt the user if they are sure. If yes, it should be removed from the list.

Any time a user enters invalid data, the system should ask them again until they enter valid data. As in our previous labs, all existing order data will be read in from files when the program starts and will be written to the files when the program exits. This program also allows the user to save their current work when requested (see menu option 5 above).

Some Tips
	
	Build this application following the process outlined in the Agile Approach Checklist for Console Applications (as specified in the Rules of Flooring Mastery section above). This process will help you approach the project in a logical and orderly manner.


	//
	
// 
> com.sg.AmazonLibrary.dtos
    +Book
        - id : int
        - titla : String
        - desc : String
        - loanDate : LocalDate
        - returnDate : LocalDate
        - userName : String
    +User
        - userName : String
        - firstName : String
        - lastName : String
> com.sg.AmazonLibrary.dao
    + PersistanceException
    + UserDAO
        + Create(User user) : User
        + ReadAll() : List<User>
        + ReadById(String userName) : User
        + Update(String userName, User user) : void
        + Delete(String userName) : void
    + BookDAO
        + Create(Book book) : Book
        + ReadAll() : List<Book>
        + ReadById(int id) : Book
        + ReadAllBooksByUser(String username) : List<Book>
        + Update(int id, Book book) : void
        + Delete(int id) : void
    + UserDAOFileImpl : UserDAO
        - users : Map<String, User>
        - FILENAME : String
        + UserDAOFileImpl(String fileName)
        - save() : void throws PersistanceException
        - load() : void throws PersistanceException
    + BookDAOFileImpl : BookDAO
        - books : Map<int, Book>
        - FILENAME : String
        + BookDAOFileImpl(String fileName)
        - save() : void throws PersistanceException
        - load() : void throws PersistanceException
> com.sg.AmazonLibrary.services
    + BookNotAvailableException : Exception
    + InvalidUserException : Exception
    + InvalidReturnDateException : Exception
    + InvalidBookException : Exception
    + InvalidUserName : Exception
    + AmazonLibraryService
        + addBook(Book book) : Book
        + loanBook(int id, String userName) : Book throws BookNotAvailableException, InvalidUserException
        + returnBook(int id, LocalDate date) : Book throws InvalidBookException, InvalidReturnDateException
        + registerUser(User user) : User throws DuplicateUserException, InvalidUserName
        + viewBooks() : List<Book> throws PersistanceException
        + viewLoanedBooks(String userName) : List<Book> throws PersistanceException, InvalidUserException
    + AmazonLibraryServiceImpl : AmazonLibraryService
        - bookDAO : BookDAO
        - userDAO : UserDAO
        + AmazonLibraryServiceImpl(BookDAO bookDAO, UserDAO userDAO)
â€‹
> com.sg.AmazonLibrary.ui
    + AmazonLibraryView
        + getMenuChoice() : int
        + displayBooks(List<Book> books): void
        + getUserInfo() : User
        + getBookId() : int
        + getReturnDate() : LocalDate
        + getUserName() : String
        + getBookInfo() : Book
> com.sg.AmazonLibrary.controller
    + AmazonLibraryController
        - service : AmazonLibraryService
        - view : AmazonLibraryView
        + AmazonLibraryController(AmazonLibraryService service, AmazonLibraryView view)
        + run() : void
        - addBook() : void
        - loanBook() : void
        - returnBook() : void
        - registerUser() : void
        - viewBooks() : void
        - viewLoanedBooks() : void
