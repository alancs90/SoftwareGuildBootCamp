ERD  Guess The Number Rest Service

Round has one Game

Game can have many rounds

One to many relationship. 
One Game has many Rounds
========================
****************KEY*********************

> package name
    +class name : interface/inheritence 
        + public name : return type
        - private name : return type
        
<T> Generic Type 
(g/s) Getters and Setters
 ai Auto Increment 
 pk primary key
 fk foreign key

*****************************************
======NOTES================

// Unsure about my Service Layer in the Class Diagrams
// Should the arguements being passed in be objects or Ids for the object? 

// Make note that the RoundId doesn't
// correlate to the round , the timeStamp of the Id indicates which round  it is 

// This is what a rowMapper looks like in Java
// Allows us ti map a row of the relations with the instance of user defined class. It iterates 
// the ResultSet internally and adds it into the collection. So we don't need to write a lot of 
// code to fetch the records as ResultSetExtractor. 

// Does the sequnce diagram look like the mastery? 
// Does it differ from Controller -> Service -> Dao -> Service -> Controller ?

// public ToDo mapRow(ResultSet rs, int index) throws SQLException {
        ToDo td = new ToDo();
        td.setId(rs.getInt("id"));
        td.setNote(rs.getString("note"));
        td.setTodo(rs.getString("todo"));
        td.setFinished(rs.getBoolean("finished"));
        return td;
    }

jdbc.query = List<T> of objects
jdbc.queryForObject = 1 object
jdbc.update = insert, update, delete

CRUD FUNCTIONALITY : 

	Create : 
    "begin" - POST – Starts a game, generates an answer, and sets the correct status. Should return a 201 CREATED message as well as the created gameId.  

    Update : 
    "guess" – POST – Makes a guess by passing the guess and gameId in as JSON. The program must calculate the results of the guess and mark the game finished if the guess is correct. It returns the Round object with the results filled in.
    
    Read All :  
    "game" – GET – Returns a list of all games. Be sure in-progress games do not display their answer.

    ReadBy Id : 

    "game/{gameId}" - GET – Returns a specific game based on ID. Be sure in-progress games do not display their answer.
    
    "rounds/{gameId} – GET – Returns a list of rounds for the specified game sorted by time.

=============ERD===================
Round
	RoundId pk ai not null
	GameId int fk (Game) not null
	Guess char(4) not null
	TimeStamp date not null

Game
	GameId Ai pk not null
	FourDigitNumber char(4) not null
	Status varChar(11) not null
=============DTO====================
Round
	RoundId : int
	GameId : int
	Guess : String
	TimeStamp : Date
	Game : Game
Game
	GameId : int
	FourDigitNumber : String
	Status : String 
	Round : List<Round> 

==============DAO===================
+DAO<T>  
	+ Create(T DTO) : T DTO 
	+ ReadAll() : List<T>
	+ ReadById(int T id) : T
	+ Update(T DTO) : T
	+ Delete(int T id) : T

+RoundDao : DAO<Round>
	- jdbc : Jdbc template 
	+ RoundDao(JdbcTemplate jdbc)
	- getRound(int RoundId) : Round
	- getGame(int GameId)  : Game

+GameDao : DAO<Game> 
	- jdbc : Jdbc template 
	+ GameDao(JdbcTemplate jdbc)
	- getRound(int RoundId) : Round
	- getGame(int GameId)  : Game

+RowMapper<T>
	+ mapRow(ResultSet rs, int i) throws SQLException
+RoundMapper : RowMapper<Round>
+GameMapper : RowMapper<Game> 

=============Class Diagram================

> com.mr.GuessTheNumber.controller
    + GuessTheNumberController
        - service : GuessTheNumberService
        + GuessTheNumberController(GuessTheNumberService service)
        
        - Scanner sc: void 
        - DataSpource ds : void 

       
        + run() : void
        - beginGame() : void
        - guess() : void 
        - viewAllGames() : void
        - viewAllRounds() : void 
        - removeGame() : void

>com.mr.GuessTheNumber.dtos
	
 	+Round
		-RoundId : int (g/s)
		-Guess : String (g/s)
		-TimeStamp : Date (g/s)

	+Game
		-GameId : int (g/s)
		-FourDigitNumber : String (g/s)
		-Status : Boolean / Bit (g/s)

>com.mr.GuessTheNumber.Daos
	
+DAO<T>  
	+Create(T DTO) : T 
	+ReadAll() : List<T>
	+ReadById(int id) : void 
	+Update(T DTO) : void

+RoundDao : DAO<Round>
	- dataSource : connection
	- jdbc : Jdbc template 
	+ roundDao(JdbcTemplate jdbc)
	- getRound(int RoundId) : Rounda
	- getGame(int GameId)  : Game
	- getGuess(String guess) : String 
	- getTimeStamp(Date timeStamp) : Date


+ RoundFileImpl : RoundDao
	- Rounds :  List <Round>

+GameDao : DAO<Game> 
	- jdbc : Jdbc template 
	+ GameDao(JdbcTemplate jdbc)
	- getRound(int RoundId) : Round
	- getGame(int GameId)  : Game
	- getFourDigitNumber(String fourDigitNumber) : String
	- getStatus(String status) : boolean 
	- getListOfRounds(int GameId) :  List<Round>

>com.mr.GuessTheNumber.RowMapper

+ RowMapper<T>
 	+ T mapRow(ResultSet rs, int i) throws SQLException
 
+ RoundMapper : RowMapper<Round> 
+ GameMapper : RowMapper<Game>

>com.mr.GuessTheNumber.Service 

+GuessTheNumberService 
	Exception e : Exception 
	DuplicateGameException : Exception 
	InvalidGameException : Exception 
	GameNotFoundException : Exception 
	PersistenceException : Exception 
	Exception e : Exception 

+ BeginNewGame(Game game): Game  throws DuplicateGameException , InvalidGameException // POST
+ Guess(int gameId, String guess) : Game  throws InvalidGameException. // POST
+ DeleteGame(Game game) : Game throws DuplicateGameException, GameNotFoundException // POST
+ FindActiveGame(Game game) : Game throws InvalidGameException  // GET
+ DisplayAllGamesToDate(localDate) : List <Game> throws InvalidGameException, Exception e // GET
+ DisplayAllRounds(Game game) : List <Round> throws InvalidGameException, Exception e // GET


+ GuessTheNumberServiceImpl : GuessTheNumberService
		-  RoundDao : RoundDao 
		-  GameDao : GameDao
		+ GuessTheNumberServiceImpl(RoundDao roundDao, GameDao gameDao, ServiceDao serviceDao)
 
+RoundDao : DAO<Round>
	- dataSource : connection
	- jdbc : Jdbc template 
	+ roundDao(JdbcTemplate jdbc)
	- getRound(int RoundId) : Round
	- getGame(int GameId)  : Game
	- getGuess(String guess) : String 
	- getTimeStamp(Date timeStamp) : Date

+GameDao : DAO<Game> 
	- jdbc : Jdbc template 
	+ GameDao(JdbcTemplate jdbc)
	- getRound(int RoundId) : Round
	- getGame(int GameId)  : Game
	- getFourDigitNumber(String fourDigitNumber) : String
	- getStatus(String status) : boolean 
	- getTimeStamp(Date timeStamp) : Date
	- getListOfRounds(int GameId) :  List<Round>





	


