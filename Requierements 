Requierements : 

Heroes 
names, descriptions, and a superpower
One to many 

DB keeps track of all location information 

Hero :
-HeroId
-Description
-Superpower

Locations :
- LocationId
- Description 
- Address information 
- Coordinates

HeroLocation :
-HeroId
-LocationId

Sightings : 

- SightingId
- HeroId
- Locations (Location_locationId) 
- Date

> Sighting can have many members 

Organization : 

- OrganizationId
- Names 
- Descriptions 
- Address / contact info 
- MemberType 

OrganizationHero:
-OrganizationId
-HeroId

>Organization has many members (SuperVillian)


==============DTO================

Organization (g/s)
- OrganizationId Int
- Name String 
- Descriptions String
- Street String
- City String
- State String
- Zip String
- MemberType String
- Heroes List<hero>; 

Hero (g/s)
- HeroId Int
- Name String
- Description String 
- SuperPower String
- organizations List<organization>; 
- sightings List<sighting>; 


Sightings (g/s)
- SightingsId Int  
- Date LocalDate
- Location String
- Description
- heroes List<heroe>; 


Locations (g/s)
- LocationId Int 
- LocationDescription String 
- AddressInformation String 
- Lattitude String
- Longitude String 


==============DAO===================
+DAO<T>  
	+ Create(T DTO) : T DTO 
	+ ReadAll() : List<T>
	+ ReadById(int T id) : T
	+ Update(T DTO) : T
	+ Delete(int T id) : T

+OrganizationDao : DAO<Organization>
	- jdbc : Jdbc template 
	+ RoundDao(JdbcTemplate jdbc)
	- getHero(int HeroId) : Hero 

+HeroDao : DAO<Hero> 
	- jdbc : Jdbc template 
	+ HeroDao(JdbcTemplate jdbc)
	- getHero(int HeroId) : Hero

+SightingsDao : DAO<Sighting>
- jdbc : Jdbc template 
+ SightingDao(JdbcTemplate jdbc)
- getSighting(int SightingsId) : Sighting

+locationDao : DAO<Location>
- jdbc : Jdbc template 
+ locationDao(JdbcTemplate jdbc)
- getLocation(int LocationId) : Location




+RowMapper<T>
	+ mapRow(ResultSet rs, int i) throws SQLException
+HeroMapper : RowMapper<Hero>
+OrganizationMapper : RowMapper<Organization> 
+SightingMapper : RowMapper<Sighting>
+LocationMapper : RowMapper<Location>










A user must be able to record a superhero/supervillain sighting for a particular location and date.


ERD 
DTOS 
DAOS
TEST 

MAKE SURE WE ARE ALL GETTING THE FUNCTIONALITY OF THE DAOS, AND TESTED. 

Represented cleanly with DTO'S 



Notes on the frontend

ThymeLeaf will help execute 

Static pages dont take in data, they just have hardcoded 

We may need a controller for each table

for example the controller taking care of just the locations, sightings, and organizations. 

Instead of one controller. 

Behind the server we have rendering and running our web application 

it creates the html on the fly. It is uploaded when its called on the server, nothing is actually running until it is called

Static / Templates files

Static you cannot pass a model into no data is in

Templates handles data and the model. 

========Notes On JDBC Template and Complex Relationships========

Hero can be affiliated w many organization 
Organization can have many heroes (Many to Many)

 
sighting can have many heroes
Heroes can have many sighting (Many to Many)

Location can have many sightings 
sighting can have on location (One to Many)


===========VALIDATION NOTES==================
For the front end we need to make wireframe

Requirements : 

Challenges : 
- Change Our Lattitude & Longitude to be able to talk 
- Pictures DB are under BLOB Binary Large Objects 

JAVAX has validation library 
to be able to annotate methods that require annotations

we Use ThymeLeaf to throw out errors

BindingResult is used when we start using on post methods 
where we validate the data that is submited


Implementations: 

-> Reformat DTO with JAVAX Annotations to validate DTO Right above it 
@NotBlank
@Size 
Do the same for all the DTO's

The Validotor will look at the constraints and make sure all the Data types are valid regarding the connected @annotation 

This will help stop breaking the database on the front end 

model attribute is how we pass data to our html for thymeleaf to manipulate it

In the html 

We have to include the hibernate Dependency which is a validator in the pom file

Then we rebuild with depency

GO to our templates on the controller to add @Valid , and the bindingresult
the result will be compared to the 

SKIP JPA + SPRING MVC FOR NOW _> THIS WILL SHOW WE HAVE OTHER WAYS 

Super Power -> SUperheroes

SUperHero can only have one superpower
superPower can have many superheroes



There are two ways of building web application
1 -> We can generate HTML in the browswer using javascript, or  (Client Side Rendering)
2 -> We can generate HTML on the server using any programming language. (Server Side Rendering)

Spring MVC Supports Both 

On the server SPRING MVC manages HTML with a view engine aka template engine. 
IT can use Java Server Pages (JSPS), ThymeLeaf, APache Tiles, or Mustache. 

ThymeLeaf in defualt uses ThymeLeaf

Its templates uses HTML attributes instead of speacial markup. This allows designers to edit templates and preview the results without learning a new language. 

The Java PErsistence API or JPA enables database acess without writing SQL. We implement JPA repositories and annotate Java Classes to map our classes to database tables and relationships. WHen configured the JPA engine generates effecient SQL and query strategies without intervnetion. JPA query methods return Java objects. JPA uses JDBC under the hood 

















<!doctype html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

    <title>Course Manager</title>
  </head>
  <body>
    <!-- Main Body of Page -->

    <!-- End main body -->
    
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
  </body>
</html>;



